/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ColorPalette2,
  urlRegex: () => urlRegex
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/commandInput.ts
var import_obsidian = require("obsidian");
var CommandInput = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.url = "";
    this.paletteSettings = { gradient: false, direction: "column", height: 150, width: 700 };
    this.colors = [];
    this.colorContainers = [];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create Palette" });
    new import_obsidian.Setting(contentEl).setName("URL").addText((text) => {
      text.onChange((value) => {
        this.url = value;
      });
    });
    let urlOrPickerContainer = contentEl.createEl("div");
    urlOrPickerContainer.addClass("create-url");
    let uopSpan = urlOrPickerContainer.createEl("span");
    uopSpan.setText("OR");
    uopSpan.style.setProperty("font-weight", "bold");
    let colorPicker = new import_obsidian.Setting(contentEl).setName("Color Picker").addColorPicker((color) => {
      color.onChange((value) => {
        this.colors.push(value);
        let colorContainer = colorsContainer.createEl("div");
        let colorSpan = colorContainer.createEl("span");
        colorSpan.setText(value);
        let trash = colorContainer.createEl("button");
        (0, import_obsidian.setIcon)(trash, "trash-2");
        trash.style.setProperty("background-color", value);
        trash.addEventListener("click", (e2) => {
          const iContainers = this.colorContainers.indexOf(colorContainer);
          this.colorContainers.splice(iContainers, 1);
          const iColors = this.colors.indexOf(value);
          this.colors.splice(iColors, 1);
          colorsContainer.removeChild(colorContainer);
        });
        this.colorContainers.push(colorContainer);
      });
    });
    colorPicker.controlEl.addClass("create-color-picker");
    colorPicker.settingEl.style.setProperty("border-top", "none");
    let colorsContainer = colorPicker.controlEl.createEl("div");
    colorsContainer.addClass("create-colors");
    let colorsText = colorsContainer.createEl("span");
    colorsText.setText("Colors:");
    new import_obsidian.Setting(contentEl).setName("Gradient").addToggle((toggle) => {
      toggle.setValue(this.paletteSettings.gradient).onChange((value) => {
        this.paletteSettings.gradient = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Direction").addDropdown((dropdown) => {
      dropdown.addOption("column", "column").addOption("row", "row").setValue(this.paletteSettings.direction.toString()).onChange((value) => {
        this.paletteSettings.direction = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Height").addText((text) => {
      text.setValue(this.paletteSettings.height.toString()).onChange((value) => {
        this.paletteSettings.height = Number(value);
      });
    });
    new import_obsidian.Setting(contentEl).addButton(
      (button) => button.setButtonText("create").setCta().onClick(() => {
        try {
          this.result = `${this.url.match(urlRegex) ? this.url : this.colors.toString()}
{"gradient": ${this.paletteSettings.gradient}, "direction": "${this.paletteSettings.direction}", "height": ${this.paletteSettings.height}}`;
          if (this.url === "" && this.colors.length === 0)
            throw new Error("URL or colors were not provided.");
          if (!this.url.match(urlRegex) && this.colors.length === 0)
            throw new Error("URL provided is not valid.");
          this.close();
          this.onSubmit(this.result);
        } catch (e2) {
          new import_obsidian.Notice(e2);
        }
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/palette.ts
var import_obsidian2 = require("obsidian");

// node_modules/colorsea/dist/index.esm.js
function t(t2, r2, n2, e2) {
  var o2, i2 = arguments.length, a2 = i2 < 3 ? r2 : null === e2 ? e2 = Object.getOwnPropertyDescriptor(r2, n2) : e2;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
    a2 = Reflect.decorate(t2, r2, n2, e2);
  else
    for (var u2 = t2.length - 1; u2 >= 0; u2--)
      (o2 = t2[u2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(r2, n2, a2) : o2(r2, n2)) || a2);
  return i2 > 3 && a2 && Object.defineProperty(r2, n2, a2), a2;
}
function r(t2, r2, n2) {
  if (n2 || 2 === arguments.length)
    for (var e2, o2 = 0, i2 = r2.length; o2 < i2; o2++)
      !e2 && o2 in r2 || (e2 || (e2 = Array.prototype.slice.call(r2, 0, o2)), e2[o2] = r2[o2]);
  return t2.concat(e2 || Array.prototype.slice.call(r2));
}
var n = function(t2, r2, n2) {
  return [t2, r2, n2].map(function(t3) {
    return (t3 /= 255) > 0.04045 ? Math.pow((t3 + 0.055) / 1.055, 2.4) : t3 / 12.92;
  });
};
var e = function(t2, r2, n2) {
  return [t2, r2, n2].map(function(t3) {
    return 255 * (t3 <= 304e-5 ? 12.92 * t3 : 1.055 * Math.pow(t3, 1 / 2.4) - 0.055);
  });
};
var o = function(t2, r2, n2) {
  return Math.min(Math.max(t2, r2), n2);
};
var i = function(t2, r2) {
  return Math.round((t2 + Number.EPSILON) * Math.pow(10, r2)) / Math.pow(10, r2);
};
var a = function(t2, r2) {
  return Math.floor(Math.random() * (r2 - t2 + 1) - t2);
};
var u = function(t2, r2, n2, e2) {
  for (var i2, a2 = [t2, r2, n2], u2 = "#", h2 = 0; h2 < a2.length; h2++)
    u2 += (i2 = a2[h2], Math.round(o(i2, 0, 255)).toString(16).padStart(2, "0"));
  return null != e2 && (u2 += Math.round(o(e2, 0, 100) / 100 * 255).toString(16).padStart(2, "0")), u2;
};
var h = function(t2) {
  var n2 = t2.length, e2 = (t2 = function(t3) {
    var r2 = (t3 = /^#/.test(t3) ? t3.slice(1) : t3).length;
    if (![3, 4, 6, 8].includes(r2))
      return "000000";
    if (6 === r2 || 8 === r2)
      return t3;
    if (3 === r2 || 4 === r2) {
      for (var n3 = "", e3 = 0; e3 < r2; e3++) {
        var o3 = t3[e3];
        n3 += "" + o3 + o3;
      }
      return n3;
    }
    return "000000";
  }(t2).padEnd(8, "ff")).match(/.{2}/g);
  if (!e2)
    return [0, 0, 0, 1];
  var o2 = [0, 0, 0], i2 = false;
  return e2.forEach(function(t3, r2) {
    r2 < 3 ? o2[r2] = parseInt(t3, 16) : i2 = 100 * parseInt(t3, 16) / 255;
  }), false === i2 || n2 < 8 ? o2 : r(r([], o2, true), [i2], false);
};
var c = function(t2, r2, n2) {
  var e2;
  e2 = [t2, r2, n2].map(function(t3) {
    return t3 / 255;
  }), t2 = e2[0], r2 = e2[1], n2 = e2[2];
  var o2 = 1 - Math.max(t2, r2, n2), i2 = o2 < 1 ? 1 / (1 - o2) : 0;
  return [(1 - t2 - o2) * i2 * 100, (1 - r2 - o2) * i2 * 100, (1 - n2 - o2) * i2 * 100, 100 * o2];
};
var l = function(t2, r2, n2, e2) {
  return 100 === e2 ? [0, 0, 0] : (e2 /= 100, [t2, r2, n2].map(function(t3) {
    return (t3 /= 100) >= 1 ? 0 : 255 * (1 - t3) * (1 - e2);
  }));
};
function p(t2, r2, n2, e2) {
  var o2;
  void 0 === e2 && (e2 = "l"), o2 = [t2, r2, n2].map(function(t3) {
    return t3 / 255;
  }), t2 = o2[0], r2 = o2[1], n2 = o2[2];
  var i2 = Math.max(t2, r2, n2), a2 = Math.min(t2, r2, n2), u2 = function(t3, r3, n3, e3) {
    var o3;
    void 0 === e3 && (e3 = false), o3 = [t3, r3, n3].map(function(t4) {
      return t4 / 255;
    }), t3 = o3[0], r3 = o3[1], n3 = o3[2];
    var i3 = Math.max(t3, r3, n3), a3 = Math.min(t3, r3, n3), u3 = 0;
    if (i3 !== a3)
      if (e3)
        u3 = (t3 - r3 + (t3 - n3)) / 2, u3 /= Math.sqrt((t3 - r3) * (t3 - r3) + (t3 - n3) * (r3 - n3)), u3 = Math.acos(u3), n3 > r3 && (u3 = 2 * Math.PI - u3), u3 /= 2 * Math.PI;
      else {
        var h3 = i3 - a3;
        u3 = i3 === t3 ? (r3 - n3) / h3 + (r3 < n3 ? 6 : 0) : i3 === r3 ? (n3 - t3) / h3 + 2 : (t3 - r3) / h3 + 4, u3 /= 6;
      }
    else
      u3 = NaN;
    return 360 * u3;
  }(t2, r2, n2, "i" === e2), h2 = 0, c2 = (i2 + a2) / 2, l2 = i2 - a2, p2 = i2, f2 = (t2 + r2 + n2) / 3;
  return "v" === e2 && (h2 = 0 === i2 ? 0 : l2 / i2), i2 !== a2 && "l" === e2 && (h2 = c2 > 0.5 ? l2 / (2 - i2 - a2) : l2 / (i2 + a2)), "i" === e2 && (h2 = f2 > 0 ? 1 - a2 / f2 : 0), h2 *= 100, c2 *= 100, f2 *= 100, "l" === e2 ? [u2, h2, c2] : "v" === e2 ? [u2, h2, p2 *= 100] : [u2, h2, f2];
}
var f = function(t2, r2, n2) {
  return p(t2, r2, n2, "l");
};
var s = function(t2, r2, n2) {
  var e2, i2, a2 = function(t3) {
    return 6 * (t3 = t3 < 0 ? t3 + 1 : t3 > 1 ? t3 - 1 : t3) < 1 ? e2 + (i2 - e2) * t3 * 6 : 2 * t3 < 1 ? i2 : 3 * t3 < 2 ? e2 + (i2 - e2) * (2 / 3 - t3) * 6 : e2;
  };
  return t2 = t2 % 360 / 360, r2 = o(r2 / 100, 0, 1), n2 = o(n2 / 100, 0, 1), e2 = 2 * n2 - (i2 = n2 <= 0.5 ? n2 * (r2 + 1) : n2 + r2 - n2 * r2), [255 * a2(t2 + 1 / 3), 255 * a2(t2), 255 * a2(t2 - 1 / 3)];
};
var v = function(t2, r2, n2) {
  return p(t2, r2, n2, "v");
};
var b = function(t2, r2, n2) {
  var e2, o2, i2 = [n2 /= 100, n2 * (1 - (r2 /= 100)), n2 * (1 - (o2 = (t2 = t2 % 360 / 360 * 360) / 60 - (e2 = Math.floor(t2 / 60 % 6))) * r2), n2 * (1 - (1 - o2) * r2)], a2 = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];
  return [255 * i2[a2[e2][0]], 255 * i2[a2[e2][1]], 255 * i2[a2[e2][2]]];
};
var y = function(t2, r2, n2) {
  return p(t2, r2, n2, "i");
};
var d = function(t2, r2, n2) {
  var e2, i2, a2, u2;
  r2 /= 100, n2 /= 100, isNaN(t2) && (t2 = 0), isNaN(r2) && (r2 = 0);
  var h2 = function(t3) {
    return (1 + r2 * Math.cos(2 * Math.PI * t3) / Math.cos(Math.PI / 3 - 2 * Math.PI * t3)) / 3;
  };
  return (t2 = (360 + t2) % 360 / 360) < 1 / 3 ? a2 = 1 - ((u2 = (1 - r2) / 3) + (i2 = h2(t2))) : t2 < 2 / 3 ? u2 = 1 - ((i2 = (1 - r2) / 3) + (a2 = h2(t2 -= 1 / 3))) : i2 = 1 - ((a2 = (1 - r2) / 3) + (u2 = h2(t2 -= 2 / 3))), e2 = [i2, a2, u2].map(function(t3) {
    return 255 * o(n2 * t3 * 3, 0, 1);
  }), [i2 = e2[0], a2 = e2[1], u2 = e2[2]];
};
var g = function(t2, r2, n2) {
  return [f(t2, r2, n2)[0], 100 * (Math.min(t2, r2, n2) / 255), 100 * (1 - Math.max(t2, r2, n2) / 255)];
};
function w(t2, r2, n2) {
  return r2 /= 100, n2 /= 100, s(t2, 100, 50).map(function(t3) {
    return 255 * (t3 / 255 * (1 - r2 - n2) + r2);
  });
}
var m = { x: [0.4124564, 0.3575761, 0.1804375], y: [0.2126729, 0.7151522, 0.072175], z: [0.0193339, 0.119192, 0.9503041] };
var M = { r: [3.2404542, -1.5371385, -0.4985314], g: [-0.969266, 1.8760108, 0.041556], b: [0.0556434, -0.2040259, 1.0572252] };
var x = 0.95047;
var _ = 1;
var C = 1.08883;
var I = 0.206896552;
var k = 8856452e-9;
var E = 24389 / 27;
var z = function(t2, r2, e2) {
  var o2 = n(t2, r2, e2);
  return [100 * m.x.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0), 100 * m.y.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0), 100 * m.z.reduce(function(t3, r3, n2) {
    return t3 + r3 * o2[n2];
  }, 0)];
};
var N = function(t2, r2, n2) {
  var o2 = [t2, r2, n2], i2 = M.r.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100, a2 = M.g.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100, u2 = M.b.reduce(function(t3, r3, n3) {
    return t3 + r3 * o2[n3];
  }, 0) / 100;
  return e(i2, a2, u2);
};
var O = function(t2, r2, n2) {
  var e2;
  return e2 = [t2 = t2 / x / 100, r2 = r2 / _ / 100, n2 = n2 / C / 100].map(function(t3) {
    return t3 > k ? Math.pow(t3, 1 / 3) : (E * t3 + 16) / 116;
  }), t2 = e2[0], r2 = e2[1], n2 = e2[2], [Math.max(0, 116 * r2 - 16), 500 * (t2 - r2), 200 * (r2 - n2)];
};
var P = function(t2, r2, n2) {
  var e2, o2 = (t2 + 16) / 116, i2 = isNaN(r2) ? o2 : o2 + r2 / 500, a2 = isNaN(n2) ? o2 : o2 - n2 / 200;
  return e2 = [i2, o2, a2].map(function(t3) {
    return t3 > I ? Math.pow(t3, 3) : (116 * t3 - 16) / E;
  }), i2 = e2[0], o2 = e2[1], a2 = e2[2], [i2 * x * 100, o2 * _ * 100, a2 * C * 100];
};
var j = function(t2, r2, n2) {
  return N.apply(void 0, P(t2, r2, n2));
};
var S = function(t2, r2, n2) {
  r2 = o(r2, -100, 100), n2 = o(n2, -100, 100);
  var e2 = Math.sqrt(r2 * r2 + n2 * n2), i2 = (180 * Math.atan2(n2, r2) / Math.PI + 360) % 360;
  return 0 === Math.round(1e4 * e2) && (i2 = Number.NaN), [t2, e2, i2];
};
var A = function(t2, r2, n2) {
  return isNaN(n2) && (n2 = 0), n2 *= Math.PI / 180, [t2, Math.cos(n2) * r2, Math.sin(n2) * r2];
};
var L = function(t2, r2, n2) {
  return P.apply(void 0, A(t2, r2, n2));
};
var H = function(t2, r2, n2) {
  var e2 = t2 + r2 + n2, o2 = 0, i2 = 0;
  return e2 > 0 && (o2 = t2 / e2, i2 = r2 / e2), [o2, i2, r2];
};
var Y = Object.freeze({ __proto__: null, linear2rgb: e, rgb2linear: n, rgb2hex: u, hex2rgb: h, rgb2cmyk: c, cmyk2rgb: l, rgb2hsl: f, hsl2rgb: s, rgb2hsv: v, hsv2rgb: b, rgb2hsi: y, hsi2rgb: d, rgb2hwb: g, hwb2rgb: w, rgb2xyz: z, xyz2rgb: N, xyz2lab: O, lab2xyz: P, rgb2lab: function(t2, r2, n2) {
  return O.apply(void 0, z(t2, r2, n2));
}, lab2rgb: j, lch2lab: A, lab2lch: S, xyz2lch: function(t2, r2, n2) {
  return S.apply(void 0, O(t2, r2, n2));
}, lch2xyz: L, xyY2xyz: function(t2, r2, n2) {
  return 0 === r2 ? [0, 0, 0] : [t2 * (n2 / r2), n2, n2 / r2 * (1 - t2 - r2)];
}, xyz2xyY: H });
function R(t2, n2) {
  return void 0 === n2 && (n2 = false), function(e2, o2, i2) {
    var a2 = i2.value;
    i2.value = function() {
      for (var e3 = [], o3 = 0; o3 < arguments.length; o3++)
        e3[o3] = arguments[o3];
      if (e3.length > 0 && n2) {
        var i3 = JSON.stringify(e3);
        t2 += i3;
      }
      if (this.cache.has(t2))
        return this.cache.get(t2);
      var u2 = a2.call.apply(a2, r([this], e3, false));
      return this.cache.set(t2, u2), u2;
    };
  };
}
function q(t2, n2, e2, o2) {
  return void 0 === t2 && (t2 = [0, 2, 2]), void 0 === n2 && (n2 = 0), void 0 === e2 && (e2 = true), void 0 === o2 && (o2 = 0), function(a2, u2, h2) {
    var c2 = h2.value;
    h2.value = function() {
      for (var a3 = [], u3 = 0; u3 < arguments.length; u3++)
        a3[u3] = arguments[u3];
      var h3 = void 0 === a3[o2] ? e2 : a3[o2], l2 = c2.call.apply(c2, r([this], a3, false));
      if (false === h3)
        return l2;
      var p2 = "number" == typeof h3 ? Math.round(h3) : 0, f2 = "number" == typeof t2 ? new Array(l2.length).fill(t2) : t2, s2 = f2.map(function(t3) {
        return 1 === n2 ? "number" == typeof h3 ? p2 : t3 : t3 + p2;
      });
      return l2.map(function(t3, r2) {
        return i(t3, s2[r2]);
      });
    };
  };
}
var D = function(t2, r2, n2) {
  var e2 = t2 instanceof ft ? t2 : new ft(t2), i2 = r2 instanceof ft ? r2 : new ft(r2), a2 = o(n2, 0, 100) / 100, u2 = 2 * a2 - 1, h2 = e2.alpha() - i2.alpha(), c2 = ((u2 * h2 == -1 ? u2 : (u2 + h2) / (1 + u2 * h2)) + 1) / 2, l2 = 1 - c2, p2 = [Math.round(o(e2.red() * c2 + i2.red() * l2, 0, 255)), Math.round(o(e2.green() * c2 + i2.green() * l2, 0, 255)), Math.round(o(e2.blue() * c2 + i2.blue() * l2, 0, 255))], f2 = e2.alpha() * a2 + i2.alpha() * (1 - a2);
  return new ft(p2, f2);
};
var F = Math.sqrt;
var U = Math.pow;
var $ = Math.cos;
var J = Math.abs;
var Z = Math.sin;
var B = Math.exp;
var G = Math.atan2;
var K = Math.PI;
var Q = function(t2) {
  return K * t2 / 180;
};
var T = function(t2, r2, n2) {
  void 0 === n2 && (n2 = true);
  var e2 = G(r2, t2);
  return n2 && (e2 = (e2 = (e2 = 180 * e2 / K) > 0 ? e2 : e2 + 360) > 360 ? e2 - 360 : e2), e2;
};
var V = function(t2, r2) {
  void 0 === r2 && (r2 = true);
  var n2 = t2.lab(false), e2 = n2[0], o2 = n2[1], i2 = n2[2];
  return [e2, F(U(o2, 2) + U(i2, 2)), T(o2, i2, r2), o2, i2];
};
var W = ["CMC", "CIE", "CIE2000", "CIE1994", "CIE1976"];
var X = "CMC";
var tt = "CIE2000";
var rt = "CIE1994";
var nt = "CIE1976";
function et(t2, r2, n2, e2) {
  void 0 === n2 && (n2 = "CIE");
  var o2 = function(t3) {
    var r3 = t3.toUpperCase();
    return W.includes(r3) && "CIE" !== r3 ? r3 : tt;
  }(n2);
  if (e2 = e2 || {}, o2 === X) {
    var i2 = Object.assign({}, { l: 1, c: 1 }, e2);
    return function(t3, r3, n3, e3) {
      void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1);
      var o3 = V(t3, true), i3 = o3[0], a3 = o3[1], u3 = o3[2], h3 = o3[3], c3 = o3[4], l2 = V(r3), p2 = l2[0], f2 = l2[1], s2 = l2[3], v2 = a3 - f2, b2 = i3 - p2, y2 = c3 - l2[4], d2 = F(U(h3 - s2, 2) + U(y2, 2) - U(v2, 2)), g2 = i3 < 16 ? 0.511 : 0.040975 * i3 / (1 + 0.01765 * i3), w2 = 0.0638 * a3 / (1 + 0.0131 * a3) + 0.638, m2 = 164 <= u3 && u3 <= 345 ? 0.56 + J(0.2 * $(Q(u3 + 168))) : 0.36 + J(0.4 * $(Q(u3 + 35))), M2 = F(U(a3, 4) / (U(a3, 4) + 1900)), x2 = w2 * (M2 * m2 + 1 - M2);
      return F(U(b2 / (n3 * g2), 2) + U(v2 / (e3 * w2), 2) + U(d2 / x2, 2));
    }(t2, r2, i2.l, i2.c);
  }
  if (o2 === rt) {
    var a2 = { kL: 1, kC: 1, kH: 1, cate: "graphic" }, u2 = Object.assign({}, a2, e2);
    return function(t3, r3, n3, e3, o3, i3) {
      void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1), void 0 === o3 && (o3 = 1), void 0 === i3 && (i3 = "graphic");
      var a3 = "textiles" === i3 ? 0.048 : 0.045, u3 = "textiles" === i3 ? 0.014 : 0.015;
      n3 = "textiles" === i3 ? 2 : n3;
      var h3 = V(t3), c3 = h3[0], l2 = h3[1], p2 = h3[3], f2 = h3[4], s2 = V(r3), v2 = s2[0], b2 = s2[1], y2 = s2[3], d2 = c3 - v2, g2 = l2 - b2, w2 = f2 - s2[4], m2 = 1 + a3 * l2, M2 = 1 + u3 * l2, x2 = F(U(p2 - y2, 2) + U(w2, 2) - U(g2, 2));
      return F(U(d2 / (1 * n3), 2) + U(g2 / (e3 * m2), 2) + U(x2 / (o3 * M2), 2));
    }(t2, r2, u2.kL, u2.kC, u2.kH, u2.cate);
  }
  if (o2 === nt)
    return function(t3, r3) {
      var n3 = t3.lab(false), e3 = n3[0], o3 = n3[1], i3 = n3[2], a3 = r3.lab(false), u3 = a3[0], h3 = a3[1], c3 = a3[2];
      return F(U(e3 - u3, 2) + U(o3 - h3, 2) + U(i3 - c3, 2));
    }(t2, r2);
  var h2 = { kL: 1, kC: 1, kH: 1 }, c2 = Object.assign({}, h2, e2);
  return function(t3, r3, n3, e3, o3) {
    void 0 === n3 && (n3 = 1), void 0 === e3 && (e3 = 1), void 0 === o3 && (o3 = 1);
    var i3 = V(t3), a3 = i3[0], u3 = i3[1], h3 = i3[3], c3 = i3[4], l2 = V(r3), p2 = l2[0], f2 = l2[1], s2 = l2[3], v2 = l2[4], b2 = (a3 + p2) / 2, y2 = (u3 + f2) / 2, d2 = (1 - F(U(y2, 7) / (U(y2, 7) + U(25, 7)))) / 2, g2 = h3 * (1 + d2), w2 = s2 * (1 + d2), m2 = F(U(g2, 2) + U(c3, 2)), M2 = F(U(w2, 2) + U(v2, 2)), x2 = T(g2, c3, true), _2 = T(w2, v2, true), C2 = (m2 + M2) / 2, I2 = J(x2 - _2) > 180 ? (x2 + _2 + 360) / 2 : (x2 + _2) / 2, k2 = 1 - 0.17 * $(Q(I2 - 30)) + 0.24 * $(Q(2 * I2)) + 0.32 * $(Q(3 * I2 + 6)) - 0.2 * $(Q(4 * I2 - 63)), E2 = J(_2 - x2) <= 180 ? _2 - x2 : J(_2 - x2) > 180 && _2 <= x2 ? _2 - x2 + 360 : _2 - x2 - 360, z2 = p2 - a3, N2 = f2 - u3, O2 = 2 * F(m2 * M2) * Z(Q(E2) / 2), P2 = 1 + 0.015 * U(b2 - 50, 2) / F(20 + U(b2 - 50, 2)), j2 = 1 + 0.045 * C2, S2 = 1 + 0.015 * C2 * k2, A2 = 30 * B(-U((I2 - 275) / 25, 2)), L2 = -2 * F(U(C2, 7) / (U(C2, 7) + U(25, 7))) * Z(2 * Q(A2));
    return F(U(z2 / (n3 * P2), 2) + U(N2 / (e3 * j2), 2) + U(O2 / (o3 * S2), 2) + L2 * (N2 / (e3 * j2)) * (O2 / (o3 * S2)));
  }(t2, r2, c2.kL, c2.kC, c2.kH);
}
var ot = function(t2, r2, n2) {
  var e2 = Math.abs, o2 = Math.max, i2 = Math.min, a2 = t2 instanceof ft ? t2 : new ft(t2), u2 = r2 instanceof ft ? r2 : new ft(r2), h2 = Object.assign({}, { b: 125, c: 500 }, n2);
  return !(e2(255 * a2.brightness() / 100 - 255 * u2.brightness() / 100) <= h2.b) && !(o2(a2.red(), u2.red()) - i2(a2.red(), u2.red()) + (o2(a2.green(), u2.green()) - i2(a2.green(), u2.green())) + (o2(a2.blue(), u2.blue()) - i2(a2.blue(), u2.blue())) <= h2.c);
};
var it = function(t2, r2, n2) {
  var e2, i2 = function(t3) {
    return o(t3, 0, 100);
  }, a2 = function(t3) {
    return o(t3, 0, 255);
  }, u2 = { h: [0, function(t3) {
    return t3 % 360;
  }], s: [1, i2], l: [2, i2], r: [0, a2], g: [1, a2], b: [2, a2] }, h2 = u2[r2][0];
  if (["h", "s", "l"].includes(r2)) {
    var c2 = t2.hsl();
    if (void 0 === n2)
      return c2[h2];
    n2 = u2[r2][1](n2), c2[h2] = n2, e2 = s.apply(void 0, c2);
  } else {
    if (e2 = t2.rgb(), void 0 === n2)
      return e2[h2];
    n2 = u2[r2][1](n2), e2[h2] = n2;
  }
  return new ft(e2, t2.alpha());
};
var at = {};
var ut = /* @__PURE__ */ new Set(["rgb", "rgba", "cmyk", "lab", "hsl", "hsla", "hsv", "hsva", "hsi", "hsia", "xyz", "lch", "hwb", "hwba"]);
var ht = /^([a-zA-Z]+)\(([\s\S]+)\)$/;
var ct = function(t2) {
  return "string" == typeof t2 ? -1 === t2.indexOf("%") ? ct(Number(t2.trim())) : (t2 = t2.split("%")[0], (t2 = Number(t2.trim())) || 0) : Math.abs(t2) < 1 ? 100 * t2 : t2;
};
var lt = function(t2, r2) {
  void 0 === r2 && (r2 = /* @__PURE__ */ new Set());
  var n2 = "string" == typeof t2 ? t2 : t2.join(",");
  if (r2.has(n2))
    throw new Error("Invalid Color");
  r2.add(n2);
  var e2 = "rgb", o2 = [0, 0, 0], i2 = 100;
  if (Array.isArray(t2)) {
    if (t2.length < 3)
      throw new Error("Invalid Color");
    for (var a2 = 0; a2 < t2.length; a2++)
      if (a2 < 3)
        o2[a2] = t2[a2];
      else {
        if (3 !== a2 || void 0 === t2[3])
          break;
        i2 = t2[3];
      }
  } else {
    var u2 = false, c2 = t2.trim().match(ht);
    if (c2 || (u2 = true), c2) {
      var l2 = c2[1].toLocaleLowerCase();
      if (e2 = l2, ut.has(l2) || (u2 = true), c2[2] && !u2) {
        var p2 = c2[2], f2 = -1 !== p2.indexOf(",") ? "," : " ", s2 = p2.split(f2);
        for (a2 = 0; a2 < 3; a2++)
          void 0 !== s2[a2] && (["lch", "lab"].includes(e2) && 0 === a2 || ["hsl", "hsla", "hsv", "hsva", "hwb", "hwba", "hsi", "hsia"].includes(e2) && a2 > 0 ? o2[a2] = ct(s2[a2]) : o2[a2] = Number(s2[a2].trim()));
        ["rgba", "hsla", "hsva", "hwba", "hsia"].includes(e2) ? (e2 = e2.slice(0, -1), void 0 !== s2[3] && (i2 = ct(s2[3]))) : "cmyk" === e2 && o2.push(void 0 !== s2[3] ? ct(s2[3]) : 0);
      }
    }
    if (u2) {
      if (!/^#(([a-fA-F\d]{3}){1,2}|[a-fA-F\d]{8})$/.test(t2))
        try {
          return t2 = function(t3, r3) {
            if (void 0 === r3 && (r3 = false), t3 = t3.toLowerCase(), void 0 === at[t3]) {
              if (r3)
                throw new Error("Unknown color name: ".concat(t3, ")"));
              return t3;
            }
            return at[t3];
          }(t2, true), lt(t2, r2);
        } catch (t3) {
          throw new Error("Invalid Color");
        }
      o2 = h(t2);
    }
  }
  return [e2, o2, i2];
};
var pt = { thowParseError: false };
var ft = function() {
  function n2(t2, r2, n3) {
    this.cache = /* @__PURE__ */ new Map(), this._rgb = [0, 0, 0], this._alpha = 100;
    var e2 = { thowParseError: pt.thowParseError }, i2 = Object.assign({}, e2, null != n3 ? n3 : {});
    try {
      var a2 = function(t3) {
        var r3, n4 = { lab2rgb: j, hsl2rgb: s, hsv2rgb: b, xyz2rgb: N, hwb2rgb: w, hsi2rgb: d }, e3 = lt(t3), i3 = e3[0], a3 = e3[1], u3 = e3[2];
        if ("rgb" === i3)
          return [a3, u3];
        "lch" === i3 && (i3 = (r3 = ["xyz", L(a3[0], a3[1], a3[2])])[0], a3 = r3[1]);
        var h3 = a3[0], c2 = a3[1], p2 = a3[2], f2 = a3[3];
        if ("cmyk" === i3)
          return [l(h3, c2, p2, f2).map(function(t4) {
            return o(t4, 0, 255);
          }), u3];
        var v2 = "".concat(i3, "2rgb");
        if ("function" == typeof n4[v2])
          return [n4[v2](h3, c2, p2).map(function(t4) {
            return o(t4, 0, 255);
          }), u3];
        throw new Error("Invalid color");
      }(t2), u2 = a2[0], h2 = a2[1];
      this._alpha = h2, this._rgb = u2;
    } catch (t3) {
      if (i2.thowParseError)
        throw t3;
    }
    void 0 !== r2 && (this._alpha = o(r2, 0, 100));
  }
  return n2.prototype.red = function(t2) {
    return it(this, "r", t2);
  }, n2.prototype.green = function(t2) {
    return it(this, "g", t2);
  }, n2.prototype.blue = function(t2) {
    return it(this, "b", t2);
  }, n2.prototype.alpha = function(t2) {
    return void 0 === t2 ? this._alpha : (t2 = o(t2, 0, 100), new n2(this.rgb(), t2));
  }, n2.prototype.fadeIn = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), t2 = r2 && "relative" === r2 ? this._alpha * t2 / 100 : t2, new n2(this.rgb(), o(this._alpha + t2, 0, 100));
  }, n2.prototype.fadeOut = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), t2 = r2 && "relative" === r2 ? this._alpha * t2 / 100 : t2, new n2(this.rgb(), o(this._alpha - t2, 0, 100));
  }, n2.prototype.opacify = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), this.fadeIn(t2, r2);
  }, n2.prototype.transparentize = function(t2, r2) {
    return void 0 === t2 && (t2 = 10), this.fadeOut(t2, r2);
  }, n2.prototype.hue = function(t2) {
    return it(this, "h", t2);
  }, n2.prototype.saturation = function(t2) {
    return it(this, "s", t2);
  }, n2.prototype.lightness = function(t2) {
    return it(this, "l", t2);
  }, n2.prototype.rgb = function(t2) {
    return r([], this._rgb, true);
  }, n2.prototype.rgba = function(t2) {
    return r(r([], this.rgb(false), true), [this._alpha], false);
  }, n2.prototype.cmyk = function(t2) {
    return c.apply(void 0, this._rgb);
  }, n2.prototype.hsl = function(t2) {
    return f.apply(void 0, this._rgb);
  }, n2.prototype.hsla = function(t2) {
    return r(r([], this.hsl(false), true), [this._alpha], false);
  }, n2.prototype.hsv = function(t2) {
    return v.apply(void 0, this._rgb);
  }, n2.prototype.hsi = function(t2) {
    return y.apply(void 0, this._rgb);
  }, n2.prototype.hwb = function(t2) {
    return g.apply(void 0, this._rgb);
  }, n2.prototype.xyz = function(t2) {
    return z.apply(void 0, this._rgb);
  }, n2.prototype.lab = function(t2) {
    return O.apply(void 0, this.xyz(false));
  }, n2.prototype.lch = function(t2) {
    return S.apply(void 0, this.lab(false));
  }, n2.prototype.xyY = function(t2) {
    return H.apply(void 0, this.xyz(false));
  }, n2.prototype.hex = function(t2) {
    void 0 === t2 && (t2 = 2);
    var n3 = 0 === t2 ? void 0 : 1 === t2 ? this._alpha : 100 === this._alpha ? void 0 : this._alpha, e2 = "color:hex:param_".concat(t2);
    if (this.cache.has(e2))
      return this.cache.get(e2);
    var o2 = u.apply(void 0, r(r([], this._rgb, false), [n3], false));
    return this.cache.set(e2, o2), o2;
  }, n2.prototype.lighten = function(t2, r2) {
    void 0 === t2 && (t2 = 5);
    var e2 = this.hsl(false), i2 = e2[0], a2 = e2[1], u2 = e2[2];
    return u2 = o(u2 += void 0 !== r2 && "relative" === r2 ? u2 * (t2 / 100) : t2, 0, 100), new n2(s(i2, a2, u2), this._alpha);
  }, n2.prototype.darken = function(t2, r2) {
    return void 0 === t2 && (t2 = 5), this.lighten(-t2, r2);
  }, n2.prototype.saturate = function(t2, r2) {
    void 0 === t2 && (t2 = 5);
    var e2 = this.hsl(false), i2 = e2[0], a2 = e2[1], u2 = e2[2];
    return a2 = o(a2 += void 0 !== r2 && "relative" === r2 ? a2 * (t2 / 100) : t2, 0, 100), new n2(s(i2, a2, u2), this._alpha);
  }, n2.prototype.desaturate = function(t2, r2) {
    return void 0 === t2 && (t2 = 5), this.saturate(-t2, r2);
  }, n2.prototype.spin = function(t2) {
    var r2 = this.hsl(false), e2 = r2[0], o2 = r2[1], i2 = r2[2];
    return new n2(s(e2 = (e2 + t2 % 360 + 360) % 360, o2, i2), this._alpha);
  }, n2.prototype.adjustHue = function(t2) {
    return this.spin(t2);
  }, n2.prototype.complement = function() {
    return this.spin(180);
  }, n2.prototype.invert = function() {
    var t2 = this._rgb.map(function(t3) {
      return 255 - t3;
    });
    return new n2([t2[0], t2[1], t2[2]], this._alpha);
  }, n2.prototype.mix = function(t2, r2) {
    return void 0 === r2 && (r2 = 50), D(this, t2, 100 - o(r2, 0, 100));
  }, n2.prototype.luma = function() {
    var t2 = this._rgb.map(function(t3) {
      return (t3 /= 255) <= 0.03928 ? t3 / 12.92 : Math.pow((t3 + 0.055) / 1.055, 2.4);
    });
    return 0.2126 * t2[0] + 0.7152 * t2[1] + 0.0722 * t2[2];
  }, n2.prototype.brightness = function() {
    var t2 = this._rgb;
    return function(t3, r2, n3) {
      return (299 * t3 + 587 * r2 + 114 * n3) / 1e3 / 255 * 100;
    }(t2[0], t2[1], t2[2]);
  }, n2.prototype.deltaE = function(t2, r2, n3) {
    return void 0 === r2 && (r2 = "CMC"), et(this, t2, r2, n3);
  }, n2.prototype.visibility = function(t2, r2) {
    return ot(this, t2, r2);
  }, t([q(0, 1, true, 0), R("color:rgb")], n2.prototype, "rgb", null), t([q(0, 1, true, 0)], n2.prototype, "rgba", null), t([q(0, 1, true, 0), R("color:cmyk")], n2.prototype, "cmyk", null), t([q(0, 1, true, 0), R("color:hsl")], n2.prototype, "hsl", null), t([q(0, 1, true, 0)], n2.prototype, "hsla", null), t([q(0, 1, true, 0), R("color:hsv")], n2.prototype, "hsv", null), t([q(0, 1, true, 0), R("color:hsi")], n2.prototype, "hsi", null), t([q(0, 1, true, 0), R("color: hwb")], n2.prototype, "hwb", null), t([q(2, 1, true, 0), R("color:xyz")], n2.prototype, "xyz", null), t([q(2, 1, true, 0), R("color:lab")], n2.prototype, "lab", null), t([q(2, 1, true, 0), R("color:lch")], n2.prototype, "lch", null), t([q(2, 1, true, 0), R("color:xyY")], n2.prototype, "xyY", null), t([R("color:luma")], n2.prototype, "luma", null), n2;
}();
var st = function(t2, r2, n2, e2) {
  return new ft([t2, r2, n2], e2);
};
var vt = function(t2, r2, n2, e2) {
  return new ft(s(t2, r2, n2), e2);
};
var bt = function(t2, r2, n2, e2) {
  return new ft(b(t2, r2, n2), e2);
};
var yt = function(t2, r2, n2, e2) {
  return new ft(d(t2, r2, n2), e2);
};
var dt = function(t2, r2, n2, e2) {
  return new ft(w(t2, r2, n2), e2);
};
var gt = function(t2, r2, n2, e2) {
  return new ft(N(t2, r2, n2), e2);
};
var wt = function(t2, r2, n2, e2) {
  return new ft(j(t2, r2, n2), e2);
};
var mt = function(t2, r2, n2, e2) {
  return new ft(N.apply(void 0, L(t2, r2, n2)), e2);
};
function Mt(t2, r2, n2) {
  return new ft(t2, r2, n2);
}
Mt.config = function(t2) {
  Object.assign(pt, t2);
}, Mt.random = function() {
  var t2 = a(0, 255), r2 = a(0, 255), n2 = a(0, 255);
  return new ft([t2, r2, n2]);
}, Mt.convertor = Y, Mt.Color = ft, Mt.rgb = st, Mt.hsl = vt, Mt.hsv = bt, Mt.hsi = yt, Mt.hwb = dt, Mt.xyz = gt, Mt.lab = wt, Mt.lch = mt, Mt.mix = D, Mt.deltaE = et, Mt.utils = { roundDecimal: i, randomRange: a }, Mt.useNames = function(t2, r2) {
  return function(t3, r3) {
    if (void 0 !== r3 && "function" == typeof r3) {
      var n2 = {};
      for (var e2 in t3) {
        var o2 = r3(e2, t3[e2]), i2 = o2[0], a2 = o2[1];
        n2[i2] = a2;
      }
      Object.assign(at, n2);
    } else
      Object.assign(at, t3);
  }(t2, r2), Mt;
};

// src/palette.ts
var colorsRegex = /(?:#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})(?:,\s*|$))+/;
var Palette = class extends import_obsidian2.MarkdownRenderChild {
  constructor(plugin, settings, containerEl, input) {
    super(containerEl);
    this.plugin = plugin;
    this.pluginSettings = settings;
    this.input = input;
    this.colors = [];
    this.settings = { gradient: false, height: 150, width: 700, direction: "column" };
    this.validity = "Valid";
  }
  onload() {
    var _a, _b, _c, _d;
    const paletteRegex = new RegExp(`^(?:${colorsRegex.source}|${urlRegex.source})(?<!,|,s*)$`);
    let split = this.input.split("\n");
    let rawColors = (_a = split[0]) == null ? void 0 : _a.trim();
    if (split.length === 2) {
      try {
        const parsedSplit = JSON.parse(split[1]);
        this.settings = { ...this.settings, ...parsedSplit };
      } catch (error) {
        this.validity = "Invalid Settings";
      }
    }
    rawColors.match(paletteRegex) === null ? (
      // Set validity to Invalid Colors & Settings if settings were deemed invalid
      this.validity === "Invalid Settings" ? this.validity = "Invalid Colors & Settings" : this.validity = "Invalid Colors"
    ) : (
      // Check if colors are derived from hex codes
      ((_b = rawColors.match(colorsRegex)) == null ? void 0 : _b[0]) ? this.colors = rawColors.split(",").filter((v2) => v2.trim()) : (
        // Check if url colors contain dashes in-between
        rawColors.match(urlRegex) && rawColors.contains("-") ? (
          // Replace dashes with hexes (colorhunt)
          this.colors = rawColors.substring(rawColors.lastIndexOf("/") + 1).split("-").map((i2) => "#" + i2)
        ) : (
          // Add hex between URL path colors (coolors)
          this.colors = ((_c = rawColors.substring(rawColors.lastIndexOf("/") + 1).match(/.{1,6}/g)) == null ? void 0 : _c.map((i2) => "#" + i2)) || []
        )
      )
    );
    if (this.validity === "Valid")
      (_d = this.plugin.palettes) == null ? void 0 : _d.push(this);
    this.createPalette(this.colors, this.settings);
    if (this.validity !== "Valid")
      this.createInvalidPalette(this.validity, rawColors);
  }
  unload() {
    var _a;
    if (this.validity === "Valid")
      (_a = this.plugin.palettes) == null ? void 0 : _a.remove(this);
  }
  refresh() {
    this.containerEl.empty();
    this.createPalette(this.colors, this.settings);
  }
  createPalette(colors, settings) {
    this.containerEl.addClass("palette");
    this.containerEl.toggleClass("paletteColumn", settings.direction === "row");
    this.containerEl.style.setProperty("--palette-height", `${settings.height}px`);
    this.settings.gradient ? createGradientPalette(this.containerEl, colors, settings) : createColorPalette(this.containerEl, colors, settings.height);
    function createGradientPalette(containerEl, colors2, settings2) {
      let child = containerEl.createEl("canvas");
      child.width = settings2.width;
      child.height = settings2.height;
      const tooltip = containerEl.createEl("section");
      tooltip.addClass("tooltip");
      const tooltipText = tooltip.createEl("span");
      let context = child.getContext("2d", { willReadFrequently: true });
      if (context != null) {
        let gradient = settings2.direction === "column" ? context.createLinearGradient(0, 0, settings2.width, 0) : context.createLinearGradient(0, 0, 0, settings2.height);
        for (const [i2, color] of colors2.entries()) {
          gradient.addColorStop(i2 / (colors2.length - 1), color);
        }
        context.fillStyle = gradient || "#000";
        context.fillRect(0, 0, settings2.width, settings2.height);
      }
      child.addEventListener(
        "mousemove",
        (e2) => {
          const rect = child.getBoundingClientRect();
          let lrPosition = e2.clientX - rect.left > rect.width / 2 ? e2.clientX - rect.left - 56 : e2.clientX - rect.left + 64;
          tooltip.style.left = lrPosition + "px";
          let bottomPosition = rect.bottom - e2.clientY < 32 ? rect.height - 40 : e2.clientY - rect.top - 8;
          tooltip.style.top = bottomPosition + "px";
          const hex = getCanvasHex(e2, rect);
          tooltipText.setText(hex.toUpperCase());
        }
      );
      child.onClickEvent((e2) => {
        const rect = child.getBoundingClientRect();
        const hex = getCanvasHex(e2, rect);
        new import_obsidian2.Notice(`Copied ${hex.toUpperCase()}`);
        navigator.clipboard.writeText(hex.toUpperCase());
      });
      const getCanvasHex = (e2, canvasBounds) => {
        let context2 = child.getContext("2d", { willReadFrequently: true });
        let x2 = e2.clientX - canvasBounds.left;
        let y2 = e2.clientY - canvasBounds.top;
        let [r2, g2, b2, a2] = (context2 == null ? void 0 : context2.getImageData(x2, y2, 1, 1).data) || [0, 0, 0, 0];
        const aConv = Math.round(a2 / 255 * 100);
        let hex = aConv !== 255 ? Mt([r2, g2, b2, aConv]).hex() : Mt([r2, g2, b2]).hex();
        return hex;
      };
      for (const [i2, color] of Object.entries(colors2).filter((e2, i3) => i3 !== colors2.length - 1)) {
        child.toggleClass("gradient", settings2.gradient);
        child.style.setProperty("--palette-background-color", `${color}, ${colors2[Number(i2) + 1] || "transparent"}`);
        child.style.setProperty("--palette-column-flex-basis", (settings2.height / colors2.length / 2).toString() + "px");
      }
    }
    function createColorPalette(containerEl, colors2, paletteHeight) {
      for (const [i2, color] of colors2.entries()) {
        const csColor = Mt(color.trim());
        let child = containerEl.createEl("div");
        child.style.setProperty("--palette-background-color", color);
        child.style.setProperty("--palette-column-flex-basis", (paletteHeight / colors2.length / 2).toString() + "px");
        let childText = child.createEl("span", { text: color.toUpperCase() });
        childText.style.setProperty("--palette-color", csColor.rgb()[0] * 0.299 + csColor.rgb()[1] * 0.587 + csColor.rgb()[2] * 0.114 > 186 ? "#000000" : "#ffffff");
        child.onClickEvent((e2) => {
          new import_obsidian2.Notice(`Copied ${color}`);
          navigator.clipboard.writeText(color);
        });
      }
    }
  }
  createInvalidPalette(type, rawColors) {
    this.containerEl.style.setProperty("--palette-height", `${this.settings.height}px`);
    const invalidSection = this.containerEl.createEl("section");
    invalidSection.toggleClass("invalid", true);
    switch (type) {
      case "Invalid Colors":
        invalidSection.createEl("span", { text: "Invalid Colors" });
        new import_obsidian2.Notice(`Palette ${rawColors} colors are defined incorrectly`, this.pluginSettings.noticeDuration);
        break;
      case "Invalid Settings":
        invalidSection.createEl("span", { text: "Invalid Settings" });
        new import_obsidian2.Notice(`Palette ${rawColors} had issues parsing settings`, this.pluginSettings.noticeDuration);
        break;
      case "Invalid Colors & Settings":
        invalidSection.createEl("span", { text: "Invalid Colors & Settings" });
        new import_obsidian2.Notice(`Palette colors and settings defined incorrectly. Please check again`, this.pluginSettings.noticeDuration);
        break;
    }
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DefaultSettings = {
  noticeDuration: 1e4
};
var SettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    let { settings } = this.plugin;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Notice Duration").setDesc("How long error messages are show in seconds (Set 0 for indefinite)").addText((text) => {
      text.setValue((settings.noticeDuration / 1e3).toString()).onChange(async (value) => {
        settings.noticeDuration = Number(value) * 1e3;
        await this.plugin.saveSettings();
      });
    });
  }
  hide() {
    var _a;
    if ((_a = this.plugin) == null ? void 0 : _a.palettes) {
      for (let palette of this.plugin.palettes) {
        palette.refresh();
      }
    }
  }
};

// src/main.ts
var urlRegex = /(?:https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}(?:\.[a-zA-Z0-9]{2,})(?:\.[a-zA-Z0-9]{2,})?\/palette\/([a-zA-Z0-9-]{2,})/;
var ColorPalette2 = class extends import_obsidian4.Plugin {
  async onload() {
    this.palettes = [];
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor(
      "palette",
      async (source, el, ctx) => {
        ctx.addChild(new Palette(this, this.settings, el, source.trim()));
      }
    );
    this.addCommand({
      id: "create",
      name: "Create",
      editorCallback: (editor) => {
        new CommandInput(this.app, (result) => {
          try {
            const codeBlock = `\`\`\`palette
${result}
\`\`\`
`;
            const cursor = editor.getCursor();
            editor.transaction({
              changes: [{ from: cursor, text: codeBlock }]
            });
            editor.setCursor({
              line: cursor.line + codeBlock.split("\n").length,
              ch: 0
            });
            new import_obsidian4.Notice(`Added ${result}`);
          } catch (error) {
            new import_obsidian4.Notice(error);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "convert-link",
      name: "Convert link",
      editorCallback: (editor) => {
        try {
          const link = editor.getSelection();
          if (!link.match(urlRegex))
            throw new Error("Selected text is not a link.");
          const codeBlock = `\`\`\`palette
${link}
\`\`\`
`;
          const cursor = editor.getCursor();
          editor.replaceSelection(codeBlock);
          editor.setCursor({
            line: cursor.line + codeBlock.split("\n").length,
            ch: 0
          });
          new import_obsidian4.Notice(`Converted ${editor.getSelection()}`);
        } catch (error) {
          new import_obsidian4.Notice(error);
        }
      }
    });
    this.addCommand({
      id: "convert-codeblock-link-to-hex",
      name: "Convert codeblock link to hex",
      editorCallback: (editor) => {
        var _a;
        try {
          const codeBlock = editor.getSelection();
          const split = codeBlock.split("\n");
          const link = split[1];
          let colors = [];
          link.match(urlRegex) && link.contains("-") ? colors = link.substring(link.lastIndexOf("/") + 1).split("-").map((i2) => "#" + i2) : (
            // Check if link (colorhunt)
            link.match(urlRegex) ? colors = ((_a = link.substring(link.lastIndexOf("/") + 1).match(/.{1,6}/g)) == null ? void 0 : _a.map((i2) => "#" + i2)) || ["Invalid Palette"] : colors = ["Invalid Palette"]
          );
          if (colors[0] === "Invalid Palette")
            throw new Error("Selected codeblock could not be converted to hex.");
          const newBlock = `\`\`\`palette
${colors.toString()}
\`\`\``;
          editor.replaceSelection(newBlock);
          new import_obsidian4.Notice(`Converted codeblock link to hex`);
        } catch (error) {
          new import_obsidian4.Notice(error);
        }
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DefaultSettings, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
